#!/usr/bin/env perl

use strict;
use warnings;
use File::Spec;
use List::Util qw(any);

sub read_targets_file {
  my ($targets_file) = @_;

  unless (-f $targets_file) {
    die "Cannot find $targets_file - make sure it exists in the current "
      . "directory\n";
  }

  open my $targets_fh, "<", $targets_file
    or die "Cannot read $targets_file: $!\n";
  my $targets_content = do { local $/ = undef; <$targets_fh> };
  close $targets_fh or warn "Cannot close $targets_file: $!\n";

  return $targets_content;
}

sub clean_targets_content {
  my ($targets_content) = @_;

  # Remove comments but preserve Makefile formatting
  $targets_content =~ s/^#.*$//gm;    # Remove comment lines
  $targets_content =~ s/^\s*$//gm;    # Remove empty lines
  $targets_content =~ s/\s+$//gm;     # Remove trailing whitespace
  $targets_content =~ s/\n{2,}/\n/g;  # Collapse multiple newlines
  # DO NOT remove leading whitespace - Makefiles need tabs!

  return $targets_content;
}

sub filter_conflicting_targets {
  my ($targets_content) = @_;

  # Remove targets that conflict with ExtUtils::MakeMaker
  # These targets are already defined by MakeMaker with :: syntax
  my @conflicting_targets = qw(test clean install);

  # Process line by line to avoid mangling
  my @lines = split /\n/, $targets_content;
  my @filtered_lines;
  my $skip_until_next_target = 0;

  for my $line (@lines) {
    # Check if this line starts a new target
    if ($line =~ /^([a-zA-Z][a-zA-Z0-9_-]*)\s*:/) {
      my $target_name = $1;
      if (any { $_ eq $target_name } @conflicting_targets) {
        $skip_until_next_target = 1;
        next;
      } else {
        $skip_until_next_target = 0;
      }
    }

    # Skip lines that are part of a conflicting target
    if ($skip_until_next_target) {
      # If this line starts with tab or is blank, it's part of the target
      if ($line =~ /^\t/ || $line =~ /^\s*$/) {
        next;
      } else {
        # This is a new non-target line, stop skipping
        $skip_until_next_target = 0;
      }
    }

    # Remove conflicting targets from .PHONY lines
    if ($line =~ /^\.PHONY:/) {
      for my $target (@conflicting_targets) {
        # Only remove exact matches, not partial matches like "install"
        # in "install-deps"
        $line =~ s/\b$target\b(?!\-)//g;
      }
      # Clean up extra spaces and backslashes
      $line =~ s/\s+/ /g;
      $line =~ s/\s+\\$/ \\/;
    }

    push @filtered_lines, $line;
  }

  return join "\n", @filtered_lines;
}

sub create_postamble {
  my ($targets_content) = @_;

  return <<"END_POSTAMBLE";

sub MY::postamble {
    return <<'END_MAKEFILE';

$targets_content

END_MAKEFILE
}
END_POSTAMBLE
}

sub read_makefile_pl {
  my ($makefile_pl) = @_;

  open my $fh, "<", $makefile_pl or die "Cannot read $makefile_pl: $!\n";
  my $content = do { local $/ = undef; <$fh> };
  close $fh or warn "Cannot close $makefile_pl: $!\n";

  return $content;
}

sub write_makefile_pl {
  my ($makefile_pl, $content) = @_;

  open my $fh, ">", $makefile_pl or die "Cannot write $makefile_pl: $!\n";
  print $fh $content;
  close $fh or warn "Cannot close $makefile_pl: $!\n";
}

sub inject_postamble {
  my ($content, $postamble) = @_;

  # Append the postamble before the final WriteMakefile call
  $content =~ s/(WriteMakefile\(%WriteMakefileArgs\);)/$postamble\n$1/;

  return $content;
}

sub main {
  my $makefile_pl = shift @ARGV or die "Usage: $0 <Makefile.PL>\n";

  # Read the shared targets from dev/Makefile.targets
  my $targets_file = "dev/Makefile.targets";
  my $targets_content = read_targets_file($targets_file);

  # Clean and filter the targets content
  $targets_content = clean_targets_content($targets_content);
  $targets_content = filter_conflicting_targets($targets_content);

  # Create the postamble
  my $postamble = create_postamble($targets_content);

  # Read and modify the Makefile.PL
  my $content = read_makefile_pl($makefile_pl);
  $content = inject_postamble($content, $postamble);

  # Write it back
  write_makefile_pl($makefile_pl, $content);

  print "Successfully added targets from $targets_file to $makefile_pl\n";
}

main();
